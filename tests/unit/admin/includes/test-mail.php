<?php

/**
 * If this file is called directly, abort.
 */
if ( ! defined( 'WPINC' ) ) {
	die;
}

if ( ! class_exists( 'PHPMailer' ) ) {
	include ABSPATH . 'wp-includes/class-phpmailer.php';
}

/**
 * Class Bonaire_Mail
 */
class Bonaire_Mail extends PHPMailer {
	
	/**
	 * The domain of the plugin.
	 *
	 * @since    1.0.0
	 * @access   protected
	 * @var      string $domain The domain of the plugin.
	 */
	protected $domain;
	
	/**
	 * @var stdClass $stored_options
	 */
	public $stored_options;
	
	/**
	 * @param null $exceptions
	 *
	 * @return \PHPMailer
	 */
	private function phpmailer( $exceptions = null ) {
		
		// Create Instance
		$mail = new parent;
		$stored_options = $this->stored_options;
		
		// Setup
		$mail->Host = $this->stored_options->smtp_host;
		$mail->CharSet = 'utf-8';
		$mail->SMTPAuth = true;
		$mail->Port = $this->stored_options->smtp_port;
		$mail->Username = $stored_options->username;
		$mail->Password = $stored_options->password;
		$mail->SMTPSecure = $stored_options->smtpsecure;
		$mail->isSMTP();
		
		// Debug
		if ( null !== $exceptions ) {
			$mail->SMTPDebug = 2;
			$mail->Debugoutput = function ( $str, $level ) {
				
				global $debug;
				$debug[] .= "$level: $str\n";
			};
			$mail->Timeout = 5;
		}
		
		return $mail;
	}
	
	/**
	 * Creates test mail data.
	 *
	 * @return \stdClass $data
	 */
	private function testmail_data() {
		
		$site_url = $this->url_to_domain( site_url() );
		// Test Data
		$data = new stdClass();
		$data->to = $this->stored_options->from;
		$data->subject = __( 'Bonaire Testmail', $this->domain );
		$data->message = __( 'Howdy. This test message was generated by "Bonaire" for WordPress. Thanks for using this plugin!', $this->domain );
		$data->from = 'testmail@' . $site_url;
		$data->fromname = $this->stored_options->fromname;
		
		return $data;
	}
	
	/**
	 * Bonaire_Mail constructor.
	 *
	 * @param string $domain
	 * @param stdClass $stored_options
	 */
	public function __construct( $domain, $stored_options ) {
		
		parent::__construct();
		
		$this->domain = $domain;
		$this->stored_options = $stored_options;
	}
	
	/**
	 * @param object $data
	 * @param null $exceptions
	 *
	 * @return \PHPMailer
	 */
	private function setup( $data, $exceptions = null ) {
		
		$to = null !== $data->to ? (string) $data->to : $this->stored_options->from;
		
		$mail = $this->phpmailer( $exceptions );
		$mail->AddAddress( $to );
		$mail->AddReplyTo( $this->stored_options->from );
		$mail->Subject = strip_tags( $data->subject );
		$mail->Body = strip_tags( $data->message );
		$mail->From = $this->stored_options->from;
		$mail->FromName = $data->fromname;
		$mail->isSMTP();
		
		return $mail;
	}
	
	/**
	 * Shortens urls to something like 'smtp.gmail.com'
	 *
	 * @param $url
	 *
	 * @return bool|string
	 */
	private function url_to_domain( $url ) {
		
		if ( substr( $url, 0, 8 ) === 'https://' ) {
			$url = substr( $url, 8 );
		}
		if ( substr( $url, 0, 7 ) === 'http://' ) {
			$url = substr( $url, 7 );
		}
		if ( substr( $url, 0, 4 ) === 'www.' ) {
			$url = substr( $url, 4 );
		}
		if ( strpos( $url, '/' ) !== false ) {
			$explode = explode( '/', $url );
			$url = $explode['0'];
		}
		
		return $url;
	}
	
	/**
	 * Sends a test mail.
	 *
	 * @return bool|\WP_Error
	 */
	public function send_testmail() {
		
		/**
		 * @var object \PHPMailer $mail
		 */
		$mail = $this->setup( $this->testmail_data(), true );
		
		try {
			$result = $mail->Send();
		} catch( Exception $e ) {
			
			return new WP_Error( (string) $e->getCode(), (string) $e->getMessage() );
		}
		
		return $result;
	}
	
	/**
	 * Sends mail trough PHPMailer
	 *
	 * @param $data
	 *
	 * @return mixed | bool | \WP_Error
	 */
	public function send_mail( $data ) {
		
		$mail = $this->setup( $data );
		
		try {
			$mail->Send();
			//$a = 2;
		} catch( Exception $e ) {
			
			return new WP_Error( $e->getCode(), $e->getMessage() );
		}
		
		// Maybe save message in "Sent" folder
		$result = null;
		if ( 'yes' === $this->stored_options->save_reply ) {
			
			try {
				$result = $this->save_message( $mail, 'Sent' );
			} catch( Exception $e ) {
				
				return new WP_Error( $e->getCode(), $e->getMessage() );
			}
		}
		
		return $result;
	}
	
	/**
	 * Saves the message in the "INBOX.Sent" folder
	 *
	 * @param PHPMailer $mail
	 * @param null $folderPath
	 *
	 * @return bool|\WP_Error
	 */
	private function save_message( $mail, $folderPath = null ) {
		
		$mail->Host = $this->stored_options->imap_host;
		$mail->Port = $this->stored_options->imap_port;
		$mail->SMTPSecure = $this->stored_options->imapsecure;
		
		$message = $mail->MIMEHeader . $mail->MIMEBody;
		//$message = $mail->getMailMIME() /* . $mail->MIMEBody*/;
		$path = 'INBOX' . ( null !== $folderPath ? '.' . $folderPath : '' );
		
		try {
			$imapStream = imap_open( '{' . $mail->Host . '/' . $mail->SMTPSecure . '/novalidate-cert/norsh/service=imap/user=' . $mail->Username . '}' . $path, $mail->Username, $mail->Password );
			imap_append( $imapStream, '{' . $mail->Host . '}' . $path, $message );
			imap_close( $imapStream );
		} catch( Exception $e ) {
			
			return new WP_Error( $e->getCode(), $e->getMessage() );
		}
		
		return true;
	}
	
	/**
	 * @param null $exceptions
	 *
	 * @return \PHPMailer
	 */
	public function get_phpmailer( $exceptions = null ) {
		
		return $this->phpmailer( $exceptions );
	}
	
}
